# version: "3.9"                       # กำหนดเวอร์ชันของ docker-compose (3.9 แนะนำสำหรับ modern Docker)

services:                            # ส่วนประกาศ service ต่าง ๆ ที่จะรัน
  db:                                # service ฐานข้อมูล MySQL
    image: mysql:8.0                 # ใช้ image MySQL เวอร์ชัน 8.0
    environment:                     # กำหนด environment variables สำหรับ MySQL
      MYSQL_DATABASE: ${DB_NAME}     # ชื่อฐานข้อมูล (ดึงค่าจากไฟล์ .env)
      MYSQL_USER: ${DB_USER}         # user สำหรับเชื่อมต่อ DB
      MYSQL_PASSWORD: ${DB_PASS}     # password ของ user DB
      MYSQL_ROOT_PASSWORD: rootpass  # รหัสผ่านของ root (ควรเปลี่ยนเป็นค่าที่ปลอดภัย)
      TZ: ${TZ}                      # ตั้งค่า timezone ของ container
    volumes:                         # กำหนด volume ให้กับ MySQL
      - dbdata:/var/lib/mysql        # เก็บข้อมูลถาวรใน volume (dbdata)
      - ../backend/sql:/docker-entrypoint-initdb.d:ro  # mount ไฟล์ .sql สำหรับ init DB ครั้งแรก
    ports: ["3306:3306"]             # เปิดพอร์ต MySQL 3306 ให้เข้าจาก host ได้ (dev เท่านั้น)

  backend:                           # service backend (PHP + Apache)
    build:                           # คำสั่ง build image backend
      context: ../backend            # โฟลเดอร์ context ที่ใช้ build (../backend)
      dockerfile: ../infra/backend.Dockerfile  # path ไปยัง Dockerfile ของ backend
    environment:                     # ค่า environment สำหรับ backend
      APP_ENV: ${APP_ENV}            # environment (development/production)
      APP_DEBUG: ${APP_DEBUG}        # เปิด/ปิด debug mode
      TZ: ${TZ}                      # timezone
      DB_HOST: db                    # host ของ DB (ชี้ไปที่ service db)
      DB_PORT: ${DB_PORT}            # port ของ DB
      DB_NAME: ${DB_NAME}            # ชื่อฐานข้อมูล
      DB_USER: ${DB_USER}            # user ของ DB
      DB_PASS: ${DB_PASS}            # password ของ DB
      JWT_SECRET: ${JWT_SECRET}      # คีย์ลับสำหรับ JWT
      JWT_TTL_SECONDS: ${JWT_TTL_SECONDS}  # อายุ token (วินาที)
      SMTP_HOST: ${SMTP_HOST}        # host SMTP (ใช้ส่งเมล)
      SMTP_PORT: ${SMTP_PORT}        # port SMTP
      SMTP_USER: ${SMTP_USER}        # user SMTP
      SMTP_PASS: ${SMTP_PASS}        # password SMTP
      SMTP_FROM: ${SMTP_FROM}        # email sender
      UPLOAD_MAX_MB: ${UPLOAD_MAX_MB}  # ขนาดไฟล์อัปโหลดสูงสุด (MB)
      UPLOAD_DIR: ${UPLOAD_DIR}      # path ที่เก็บไฟล์อัปโหลด
      CORS_ORIGIN: ${CORS_ORIGIN}    # กำหนด origin ที่อนุญาต (CORS)
    volumes:
      - ../backend:/var/www/html     # mount โค้ด backend เข้ามา (hot reload ใช้ใน dev)
    ports: ["8080:80"]               # map port 80 ใน container → 8080 บน host
    depends_on: [db, mailhog]        # รันหลังจาก db และ mailhog

  frontend:                          # service frontend (React + Vite)
    build:                           # คำสั่ง build image frontend
      context: ../frontend           # โฟลเดอร์ context (../frontend)
      dockerfile: ../infra/frontend.Dockerfile  # path Dockerfile ของ frontend
    environment:
      VITE_API_BASE: ${VITE_API_BASE} # base URL API ของ frontend
    volumes:
      - ../frontend:/app             # mount โค้ด frontend เพื่อ hot reload
      - /app/node_modules            # แยก node_modules ไม่ให้ทับ
    ports: ["5173:5173"]             # เปิดพอร์ต 5173 (vite dev server)
    command: ["npm","run","dev","--","--host","0.0.0.0"]  # สั่งรัน Vite dev server แบบเข้าจาก network ได้
    depends_on: [backend]            # รันหลังจาก backend พร้อม

  mailhog:                           # service Mailhog (สำหรับดักจับอีเมล dev)
    image: mailhog/mailhog:v1.0.1    # ใช้ image mailhog เวอร์ชัน 1.0.1
    ports: ["8025:8025"]             # เปิดพอร์ต web UI ของ Mailhog (http://localhost:8025)

volumes:                             # ส่วนกำหนด volume ถาวร
  dbdata:                            # volume สำหรับเก็บข้อมูล MySQL
